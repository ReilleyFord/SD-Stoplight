
SD-Stoplight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000003cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000358  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00803e00  00803e00  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b66  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015d3  00000000  00000000  00001fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000555  00000000  00000000  000035a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00003b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b4f  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046c  00000000  00000000  000046bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00004b2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>
  28:	1a c0       	rjmp	.+52     	; 0x5e <__bad_interrupt>
  2a:	19 c0       	rjmp	.+50     	; 0x5e <__bad_interrupt>
  2c:	18 c0       	rjmp	.+48     	; 0x5e <__bad_interrupt>
  2e:	17 c0       	rjmp	.+46     	; 0x5e <__bad_interrupt>
  30:	16 c0       	rjmp	.+44     	; 0x5e <__bad_interrupt>
  32:	15 c0       	rjmp	.+42     	; 0x5e <__bad_interrupt>
  34:	14 c0       	rjmp	.+40     	; 0x5e <__bad_interrupt>
  36:	13 c0       	rjmp	.+38     	; 0x5e <__bad_interrupt>
  38:	12 c0       	rjmp	.+36     	; 0x5e <__bad_interrupt>
  3a:	11 c0       	rjmp	.+34     	; 0x5e <__bad_interrupt>
  3c:	10 c0       	rjmp	.+32     	; 0x5e <__bad_interrupt>

0000003e <__ctors_end>:
  3e:	11 24       	eor	r1, r1
  40:	1f be       	out	0x3f, r1	; 63
  42:	cf ef       	ldi	r28, 0xFF	; 255
  44:	cd bf       	out	0x3d, r28	; 61
  46:	df e3       	ldi	r29, 0x3F	; 63
  48:	de bf       	out	0x3e, r29	; 62

0000004a <__do_clear_bss>:
  4a:	2e e3       	ldi	r18, 0x3E	; 62
  4c:	a0 e0       	ldi	r26, 0x00	; 0
  4e:	be e3       	ldi	r27, 0x3E	; 62
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a3 30       	cpi	r26, 0x03	; 3
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	5f d0       	rcall	.+190    	; 0x11a <main>
  5c:	7b c1       	rjmp	.+758    	; 0x354 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <Deselect>:
/*
 * Flipping CS bit -- De-selecting card.
 * Pulled High for deselection.
 */
static void Deselect(void) {
	 SPI_OUT |= CS;
  60:	e4 e0       	ldi	r30, 0x04	; 4
  62:	f4 e0       	ldi	r31, 0x04	; 4
  64:	80 81       	ld	r24, Z
  66:	80 61       	ori	r24, 0x10	; 16
  68:	80 83       	st	Z, r24
  6a:	08 95       	ret

0000006c <SendByte>:
 * Until the transfer is complete. The flag is then cleared after the flag and the Data register are read. 
 * The SPI Data register is read for a response and the response is returned by the function. 
 */
static unsigned char SendByte(unsigned char c) {

	SPI0_DATA = c; // Write to SPI Data Register - Writes out to MOSI via Hosts SPI Bus
  6c:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>

	while(!(SPI0_INTFLAGS & SPI_IF_bm)); // Wait until Transfer Complete flag is set. 
  70:	e3 e2       	ldi	r30, 0x23	; 35
  72:	f8 e0       	ldi	r31, 0x08	; 8
  74:	80 81       	ld	r24, Z
  76:	88 23       	and	r24, r24
  78:	ec f7       	brge	.-6      	; 0x74 <SendByte+0x8>

	return SPI0_DATA;
  7a:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
  7e:	08 95       	ret

00000080 <SendCommand>:
 * Exchanges CMD and arg with CRC and 0xff filled bytes with card.
 * Returns the response provided by the card.
 * For advanced initialization and commands this will send the required preface CMD55
 * Error codes will be 0xff for no response, 0x01 for OK, or CMD specific responses.
 */
static int8_t SendCommand(uint8_t cmd, uint32_t arg) {
  80:	ff 92       	push	r15
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	08 2f       	mov	r16, r24
  8c:	c4 2f       	mov	r28, r20
  8e:	d5 2f       	mov	r29, r21
  90:	16 2f       	mov	r17, r22
  92:	f7 2e       	mov	r15, r23

  /*
   * Needed for SDC and advanced initialization.
   * ACMD(n) requires CMD55 to be sent first.
   */
  if(cmd & 0x80) {
  94:	88 23       	and	r24, r24
  96:	44 f4       	brge	.+16     	; 0xa8 <SendCommand+0x28>
    cmd = cmd & 0x7f; // Stripping high bit.
    response = SendCommand(CMD55, 0);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	ba 01       	movw	r22, r20
  9e:	87 e7       	ldi	r24, 0x77	; 119
  a0:	ef df       	rcall	.-34     	; 0x80 <SendCommand>
    if (response > 1) return response;
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	a0 f5       	brcc	.+104    	; 0x10e <SendCommand+0x8e>
  /*
   * Needed for SDC and advanced initialization.
   * ACMD(n) requires CMD55 to be sent first.
   */
  if(cmd & 0x80) {
    cmd = cmd & 0x7f; // Stripping high bit.
  a6:	0f 77       	andi	r16, 0x7F	; 127
    response = SendCommand(CMD55, 0);
    if (response > 1) return response;
  }

  Deselect();
  a8:	db df       	rcall	.-74     	; 0x60 <Deselect>
  SendByte(0xff);
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	df df       	rcall	.-66     	; 0x6c <SendByte>
/*
 * Flipping CS bit -- Selecting card.
 * Pulled low for selection.
 */
static void Select(void) {
	SPI_OUT &= ~CS;
  ae:	e4 e0       	ldi	r30, 0x04	; 4
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	80 81       	ld	r24, Z
  b4:	8f 7e       	andi	r24, 0xEF	; 239
  b6:	80 83       	st	Z, r24
  }

  Deselect();
  SendByte(0xff);
  Select();
  SendByte(0xff);
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	d8 df       	rcall	.-80     	; 0x6c <SendByte>

  /*
   * Begin sending command
   * Command structure is 48 bits??
   */
   SendByte(cmd | 0x40);
  bc:	80 2f       	mov	r24, r16
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	d5 df       	rcall	.-86     	; 0x6c <SendByte>
   SendByte((unsigned char)(arg>>24));
  c2:	8f 2d       	mov	r24, r15
  c4:	d3 df       	rcall	.-90     	; 0x6c <SendByte>
   SendByte((unsigned char)(arg>>16));
  c6:	81 2f       	mov	r24, r17
  c8:	d1 df       	rcall	.-94     	; 0x6c <SendByte>
   SendByte((unsigned char)(arg>>8));
  ca:	8d 2f       	mov	r24, r29
  cc:	cf df       	rcall	.-98     	; 0x6c <SendByte>
   SendByte((unsigned char)(arg&0xff));
  ce:	8c 2f       	mov	r24, r28
  d0:	cd df       	rcall	.-102    	; 0x6c <SendByte>
   if(cmd == SD_IDLE)  crc = 0x95;
   if(cmd == SD_INTER) crc = 0x87;
  d2:	08 34       	cpi	r16, 0x48	; 72
  d4:	11 f4       	brne	.+4      	; 0xda <SendCommand+0x5a>
  d6:	87 e8       	ldi	r24, 0x87	; 135
  d8:	01 c0       	rjmp	.+2      	; 0xdc <SendCommand+0x5c>
  da:	85 e9       	ldi	r24, 0x95	; 149
   SendByte(crc);
  dc:	c7 df       	rcall	.-114    	; 0x6c <SendByte>
  de:	ca e0       	ldi	r28, 0x0A	; 10
  e0:	d0 e0       	ldi	r29, 0x00	; 0

   // Send clocks waiting for timeout. 
	for (int i = 0; i<10; i++) {
		response = SendByte(0xff);
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	c3 df       	rcall	.-122    	; 0x6c <SendByte>
  e6:	18 2f       	mov	r17, r24
		if((response & 0x80) == 0) break; // High bit flipped means ok.
  e8:	88 23       	and	r24, r24
  ea:	14 f4       	brge	.+4      	; 0xf0 <SendCommand+0x70>
  ec:	21 97       	sbiw	r28, 0x01	; 1
   if(cmd == SD_IDLE)  crc = 0x95;
   if(cmd == SD_INTER) crc = 0x87;
   SendByte(crc);

   // Send clocks waiting for timeout. 
	for (int i = 0; i<10; i++) {
  ee:	c9 f7       	brne	.-14     	; 0xe2 <SendCommand+0x62>
		response = SendByte(0xff);
		if((response & 0x80) == 0) break; // High bit flipped means ok.
	}

   // Switch statement with fall through and default. De selecting card if no more R/W operations required.
   switch (cmd) {
  f0:	00 35       	cpi	r16, 0x50	; 80
  f2:	49 f0       	breq	.+18     	; 0x106 <SendCommand+0x86>
  f4:	20 f4       	brcc	.+8      	; 0xfe <SendCommand+0x7e>
  f6:	00 54       	subi	r16, 0x40	; 64
  f8:	02 30       	cpi	r16, 0x02	; 2
  fa:	40 f4       	brcc	.+16     	; 0x10c <SendCommand+0x8c>
  fc:	04 c0       	rjmp	.+8      	; 0x106 <SendCommand+0x86>
  fe:	07 37       	cpi	r16, 0x77	; 119
 100:	11 f0       	breq	.+4      	; 0x106 <SendCommand+0x86>
 102:	09 3e       	cpi	r16, 0xE9	; 233
 104:	19 f4       	brne	.+6      	; 0x10c <SendCommand+0x8c>
     case SD_ADV_INIT :
     case SD_SET_BLK :
     case SD_IDLE :
     case SD_INIT :
     case CMD55 :
       Deselect();
 106:	ac df       	rcall	.-168    	; 0x60 <Deselect>
       SendByte(0xff);
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	b0 df       	rcall	.-160    	; 0x6c <SendByte>
     default :
       break;
   }

   return response;
 10c:	81 2f       	mov	r24, r17
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	ff 90       	pop	r15
 118:	08 95       	ret

0000011a <main>:
static int8_t   ReadSD(void);

int main(void) {
	
  // Enable Global Interrupts
  CPU_SREG = CPU_I_bm;
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	8f bf       	out	0x3f, r24	; 63
 
  // Set SPI Data Direction Register. Drive outputs to SPI port MOSI and SCK.
  SPI_DDR |= MOSI;	// MOSI -- Output
 11e:	e0 e0       	ldi	r30, 0x00	; 0
 120:	f4 e0       	ldi	r31, 0x04	; 4
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
  SPI_DDR &= ~MISO; // MISO -- Input
 128:	80 81       	ld	r24, Z
 12a:	8b 7f       	andi	r24, 0xFB	; 251
 12c:	80 83       	st	Z, r24
  SPI_DDR |= SCK;	// SCK  -- Output
 12e:	80 81       	ld	r24, Z
 130:	88 60       	ori	r24, 0x08	; 8
 132:	80 83       	st	Z, r24
  SPI_DDR |= CS;	// CS   -- Output 
 134:	80 81       	ld	r24, Z
 136:	80 61       	ori	r24, 0x10	; 16
 138:	80 83       	st	Z, r24
  Deselect(); // Deselect CS by driving output High.
 13a:	92 df       	rcall	.-220    	; 0x60 <Deselect>
  PORTA_PIN2CTRL |= ISC_MASK | PULLUP_MASK; // MISO ISC and Pullup enable.
 13c:	e2 e1       	ldi	r30, 0x12	; 18
 13e:	f4 e0       	ldi	r31, 0x04	; 4
 140:	80 81       	ld	r24, Z
 142:	8d 60       	ori	r24, 0x0D	; 13
 144:	80 83       	st	Z, r24
   * SPI_MASTER_bm - Master/Slave Select. If set Master mode is enabled.
   * SPI_PRESC_DIV128_gc - Setting Clock Rate - Prescaler, Clock Speed is 16mhz - 20Mhz. 
   * Prescaler divides by 128. Necessary because SPI maximum clock speed limitations.
   * In this configuration Clock Rate is set to fosc/128.
   **/
  SPI_PORT = SPI_ENABLE_bm // SPI Enable Bitmask
 146:	87 e2       	ldi	r24, 0x27	; 39
 148:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
		   | SPI_MASTER_bm // SPI Master Mode Bitmask
		   | SPI_PRESC_DIV128_gc; // Clock Prescaler Bitmask (Divide clock speed by 128 in this case)
		   
  // Setup hardware lines/pins
  // Red LED
  LED_RED_OFF;
 14c:	a6 e2       	ldi	r26, 0x26	; 38
 14e:	b4 e0       	ldi	r27, 0x04	; 4
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	8c 93       	st	X, r24
  LED_RED_DDR |= LED_RED_MASK;
 154:	e1 e2       	ldi	r30, 0x21	; 33
 156:	f4 e0       	ldi	r31, 0x04	; 4
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24

  // Green LED
  LED_GREEN_OFF;
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	8c 93       	st	X, r24
  LED_GREEN_DDR |= LED_GREEN_MASK;
 162:	80 81       	ld	r24, Z
 164:	88 60       	ori	r24, 0x08	; 8
 166:	80 83       	st	Z, r24

  // Yellow LED
  LED_YELLOW_OFF;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	8c 93       	st	X, r24
  LED_YELLOW_DDR |= LED_YELLOW_MASK;
 16c:	80 81       	ld	r24, Z
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	80 83       	st	Z, r24

  // Switch setup - Marking as input
  SW_DDR &= ~SW_MASK;
 172:	e0 e2       	ldi	r30, 0x20	; 32
 174:	f4 e0       	ldi	r31, 0x04	; 4
 176:	80 81       	ld	r24, Z
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	80 83       	st	Z, r24
  SW_PIN |= ISC_MASK | PULLUP_MASK; // ISC and Pullup enable. Switch Pin
 17c:	e0 e3       	ldi	r30, 0x30	; 48
 17e:	f4 e0       	ldi	r31, 0x04	; 4
 180:	80 81       	ld	r24, Z
 182:	8d 60       	ori	r24, 0x0D	; 13
 184:	80 83       	st	Z, r24
 
 // Begin Infinite Loop polling switch to begin processing.
  while(1) {
	 if((PORTB_IN & SW_MASK) == 0) { 
 186:	08 e2       	ldi	r16, 0x28	; 40
 188:	14 e0       	ldi	r17, 0x04	; 4
		LED_RED_OFF;
 18a:	0f 2e       	mov	r0, r31
 18c:	f6 e2       	ldi	r31, 0x26	; 38
 18e:	cf 2e       	mov	r12, r31
 190:	f4 e0       	ldi	r31, 0x04	; 4
 192:	df 2e       	mov	r13, r31
 194:	f0 2d       	mov	r31, r0
 196:	68 94       	set
 198:	66 24       	eor	r6, r6
 19a:	61 f8       	bld	r6, 1
 19c:	86 2c       	mov	r8, r6
		LED_YELLOW_OFF;
 19e:	68 94       	set
 1a0:	77 24       	eor	r7, r7
 1a2:	72 f8       	bld	r7, 2
		LED_GREEN_OFF;
 1a4:	68 94       	set
 1a6:	99 24       	eor	r9, r9
 1a8:	93 f8       	bld	r9, 3
		_delay_ms(500);
		LED_RED_ON;
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f5 e2       	ldi	r31, 0x25	; 37
 1ae:	ef 2e       	mov	r14, r31
 1b0:	f4 e0       	ldi	r31, 0x04	; 4
 1b2:	ff 2e       	mov	r15, r31
 1b4:	f0 2d       	mov	r31, r0
 * ReadSD function
 * Reads the SD Status and returned registers. 
 * Checks for CMD42 Lock.
 */
static int8_t ReadSD(void) {
  cardstatus[0] = SendCommand(SD_STATUS, 0);
 1b6:	0f 2e       	mov	r0, r31
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	af 2e       	mov	r10, r31
 1bc:	fe e3       	ldi	r31, 0x3E	; 62
 1be:	bf 2e       	mov	r11, r31
 1c0:	f0 2d       	mov	r31, r0
    for(i = 20000; i > 0; i--) {
      response = SendCommand(SD_INIT, 0);
      if(response == 0) break;
    }
    SendCommand(SD_SET_BLK, 512); // SDSC might reset block length to 1024, reinit to 512.
    sdtype = SDTYPE_SD;
 1c2:	55 24       	eor	r5, r5
 1c4:	53 94       	inc	r5
  SW_DDR &= ~SW_MASK;
  SW_PIN |= ISC_MASK | PULLUP_MASK; // ISC and Pullup enable. Switch Pin
 
 // Begin Infinite Loop polling switch to begin processing.
  while(1) {
	 if((PORTB_IN & SW_MASK) == 0) { 
 1c6:	f8 01       	movw	r30, r16
 1c8:	80 81       	ld	r24, Z
 1ca:	80 fd       	sbrc	r24, 0
 1cc:	fc cf       	rjmp	.-8      	; 0x1c6 <main+0xac>
		LED_RED_OFF;
 1ce:	f6 01       	movw	r30, r12
 1d0:	80 82       	st	Z, r8
		LED_YELLOW_OFF;
 1d2:	70 82       	st	Z, r7
		LED_GREEN_OFF;
 1d4:	90 82       	st	Z, r9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	ff e9       	ldi	r31, 0x9F	; 159
 1d8:	26 e8       	ldi	r18, 0x86	; 134
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	f1 50       	subi	r31, 0x01	; 1
 1de:	20 40       	sbci	r18, 0x00	; 0
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0xc2>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0xcc>
 1e6:	00 00       	nop
		_delay_ms(500);
		LED_RED_ON;
 1e8:	f7 01       	movw	r30, r14
 1ea:	80 81       	ld	r24, Z
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	80 83       	st	Z, r24
 1f0:	ff e3       	ldi	r31, 0x3F	; 63
 1f2:	2d e0       	ldi	r18, 0x0D	; 13
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	f1 50       	subi	r31, 0x01	; 1
 1f8:	20 40       	sbci	r18, 0x00	; 0
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0xdc>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0xe6>
 200:	00 00       	nop
		_delay_ms(1000);
		LED_YELLOW_ON;
 202:	f7 01       	movw	r30, r14
 204:	80 81       	ld	r24, Z
 206:	84 60       	ori	r24, 0x04	; 4
 208:	80 83       	st	Z, r24
 20a:	ff e3       	ldi	r31, 0x3F	; 63
 20c:	2d e0       	ldi	r18, 0x0D	; 13
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	f1 50       	subi	r31, 0x01	; 1
 212:	20 40       	sbci	r18, 0x00	; 0
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0xf6>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x100>
 21a:	00 00       	nop
		_delay_ms(1000);
		LED_GREEN_ON;
 21c:	f7 01       	movw	r30, r14
 21e:	80 81       	ld	r24, Z
 220:	88 60       	ori	r24, 0x08	; 8
 222:	80 83       	st	Z, r24
 224:	ff e1       	ldi	r31, 0x1F	; 31
 226:	21 ea       	ldi	r18, 0xA1	; 161
 228:	87 e0       	ldi	r24, 0x07	; 7
 22a:	f1 50       	subi	r31, 0x01	; 1
 22c:	20 40       	sbci	r18, 0x00	; 0
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x110>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x11a>
 234:	00 00       	nop
		_delay_ms(2500);
		LED_RED_OFF;
 236:	f6 01       	movw	r30, r12
 238:	80 82       	st	Z, r8
		LED_GREEN_OFF;
 23a:	90 82       	st	Z, r9
		LED_YELLOW_OFF;
 23c:	70 82       	st	Z, r7
 */
static int8_t InitializeSD(void) {
  int i;
  int8_t response;

  sdtype = SDTYPE_UNKNOWN;
 23e:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <sdtype>
  
  Deselect();
 242:	0e df       	rcall	.-484    	; 0x60 <Deselect>
 244:	ca e4       	ldi	r28, 0x4A	; 74
 246:	d0 e0       	ldi	r29, 0x00	; 0

  // Send bytes while card stabilizes.
  for(i=0; i < 74; i++) SendByte(0xff);
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	10 df       	rcall	.-480    	; 0x6c <SendByte>
 24c:	21 97       	sbiw	r28, 0x01	; 1
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x12e>
 250:	c0 e1       	ldi	r28, 0x10	; 16
 252:	d0 e0       	ldi	r29, 0x00	; 0
  
  for(i = 0; i < 0x10; i++) {
    response = SendCommand(SD_IDLE, 0); // Try SD_IDLE until success or timeout.
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	ba 01       	movw	r22, r20
 25a:	80 e4       	ldi	r24, 0x40	; 64
 25c:	11 df       	rcall	.-478    	; 0x80 <SendCommand>
    if(response == 1) break;
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	09 f4       	brne	.+2      	; 0x264 <main+0x14a>
 262:	5b c0       	rjmp	.+182    	; 0x31a <main+0x200>
 264:	21 97       	sbiw	r28, 0x01	; 1
  Deselect();

  // Send bytes while card stabilizes.
  for(i=0; i < 74; i++) SendByte(0xff);
  
  for(i = 0; i < 0x10; i++) {
 266:	b1 f7       	brne	.-20     	; 0x254 <main+0x13a>
 268:	4c c0       	rjmp	.+152    	; 0x302 <main+0x1e8>
  // Always attempt ACMD41 first for SDC then drop to CMD1
  response = SendCommand(SD_INTER, 0x1aa);
  if(response == 0x01) {
    for(i = 0; i < 4; i++) SendByte(0xff);          // Clock through 4 bytes to burn 32 bit lower response.
    for(i = 20000; i > 0; i--) {                    // Send Advanced init cmd until initialization complete and response is 0x00
      response = SendCommand(SD_ADV_INIT, 1UL<<30); // Send advanced init with HCS bit 30 set.
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	70 e4       	ldi	r23, 0x40	; 64
 272:	89 ee       	ldi	r24, 0xE9	; 233
 274:	05 df       	rcall	.-502    	; 0x80 <SendCommand>
      if(response == 0) break;
 276:	88 23       	and	r24, r24
 278:	11 f0       	breq	.+4      	; 0x27e <main+0x164>
 27a:	21 97       	sbiw	r28, 0x01	; 1

  // Always attempt ACMD41 first for SDC then drop to CMD1
  response = SendCommand(SD_INTER, 0x1aa);
  if(response == 0x01) {
    for(i = 0; i < 4; i++) SendByte(0xff);          // Clock through 4 bytes to burn 32 bit lower response.
    for(i = 20000; i > 0; i--) {                    // Send Advanced init cmd until initialization complete and response is 0x00
 27c:	b1 f7       	brne	.-20     	; 0x26a <main+0x150>
      response = SendCommand(SD_ADV_INIT, 1UL<<30); // Send advanced init with HCS bit 30 set.
      if(response == 0) break;
    }
    sdtype = SDTYPE_SDHC;
 27e:	80 92 02 3e 	sts	0x3E02, r8	; 0x803e02 <sdtype>
 282:	22 c0       	rjmp	.+68     	; 0x2c8 <main+0x1ae>
  } else { // Begin initializing SDSC -- CMD1
    response = SendCommand(SD_OCR, 0); // Not necessary if voltage is set correctly.
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	ba 01       	movw	r22, r20
 28a:	8a e7       	ldi	r24, 0x7A	; 122
 28c:	f9 de       	rcall	.-526    	; 0x80 <SendCommand>
    if(response == 0x01)
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	09 f0       	breq	.+2      	; 0x294 <main+0x17a>
 292:	5d c0       	rjmp	.+186    	; 0x34e <main+0x234>
      for(i = 0; i < 4; i++) SendByte(0xff); // Burn the next 4 bytes returned (OCR)
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	ea de       	rcall	.-556    	; 0x6c <SendByte>
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	e8 de       	rcall	.-560    	; 0x6c <SendByte>
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	e6 de       	rcall	.-564    	; 0x6c <SendByte>
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	e4 de       	rcall	.-568    	; 0x6c <SendByte>
 2a4:	54 c0       	rjmp	.+168    	; 0x34e <main+0x234>
    for(i = 20000; i > 0; i--) {
      response = SendCommand(SD_INIT, 0);
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	ba 01       	movw	r22, r20
 2ac:	81 e4       	ldi	r24, 0x41	; 65
 2ae:	e8 de       	rcall	.-560    	; 0x80 <SendCommand>
      if(response == 0) break;
 2b0:	88 23       	and	r24, r24
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <main+0x19e>
 2b4:	21 97       	sbiw	r28, 0x01	; 1
    sdtype = SDTYPE_SDHC;
  } else { // Begin initializing SDSC -- CMD1
    response = SendCommand(SD_OCR, 0); // Not necessary if voltage is set correctly.
    if(response == 0x01)
      for(i = 0; i < 4; i++) SendByte(0xff); // Burn the next 4 bytes returned (OCR)
    for(i = 20000; i > 0; i--) {
 2b6:	b9 f7       	brne	.-18     	; 0x2a6 <main+0x18c>
      response = SendCommand(SD_INIT, 0);
      if(response == 0) break;
    }
    SendCommand(SD_SET_BLK, 512); // SDSC might reset block length to 1024, reinit to 512.
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	52 e0       	ldi	r21, 0x02	; 2
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	80 e5       	ldi	r24, 0x50	; 80
 2c2:	de de       	rcall	.-580    	; 0x80 <SendCommand>
    sdtype = SDTYPE_SD;
 2c4:	50 92 02 3e 	sts	0x3E02, r5	; 0x803e02 <sdtype>
  }

  SendByte(0xff); // End initialization with 8 clocks.
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	d0 de       	rcall	.-608    	; 0x6c <SendByte>
 * ReadSD function
 * Reads the SD Status and returned registers. 
 * Checks for CMD42 Lock.
 */
static int8_t ReadSD(void) {
  cardstatus[0] = SendCommand(SD_STATUS, 0);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	ba 01       	movw	r22, r20
 2d2:	8d e4       	ldi	r24, 0x4D	; 77
 2d4:	d5 de       	rcall	.-598    	; 0x80 <SendCommand>
 2d6:	f5 01       	movw	r30, r10
 2d8:	80 83       	st	Z, r24
  cardstatus[1] = SendByte(0xff);
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	c7 de       	rcall	.-626    	; 0x6c <SendByte>
 2de:	f5 01       	movw	r30, r10
 2e0:	81 83       	std	Z+1, r24	; 0x01

  SendByte(0xff);
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	c3 de       	rcall	.-634    	; 0x6c <SendByte>
  /*
   * If card passes init vibe check, begin processing command.
   */
   response = ReadSD();
   if(response == SD_OK) {
	   if(!(cardstatus[1] & 0x01)) LED_GREEN_ON; // No CMD42 lock detected.
 2e6:	f5 01       	movw	r30, r10
 2e8:	81 81       	ldd	r24, Z+1	; 0x01
 2ea:	80 fd       	sbrc	r24, 0
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <main+0x1de>
 2ee:	f7 01       	movw	r30, r14
 2f0:	80 81       	ld	r24, Z
 2f2:	88 60       	ori	r24, 0x08	; 8
 2f4:	80 83       	st	Z, r24
 2f6:	67 cf       	rjmp	.-306    	; 0x1c6 <main+0xac>
	   else if ((cardstatus[1] & 0x01) == 1) LED_RED_ON; // CMD42 lock detected and enabled.
 2f8:	f7 01       	movw	r30, r14
 2fa:	80 81       	ld	r24, Z
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	80 83       	st	Z, r24
 300:	62 cf       	rjmp	.-316    	; 0x1c6 <main+0xac>
  for(i = 0; i < 0x10; i++) {
    response = SendCommand(SD_IDLE, 0); // Try SD_IDLE until success or timeout.
    if(response == 1) break;
  }
  if(response != 1) {
	LED_YELLOW_ON;
 302:	f7 01       	movw	r30, r14
 304:	80 81       	ld	r24, Z
 306:	84 60       	ori	r24, 0x04	; 4
 308:	80 83       	st	Z, r24
	LED_GREEN_OFF;
 30a:	f6 01       	movw	r30, r12
 30c:	90 82       	st	Z, r9
	LED_RED_OFF;
 30e:	60 82       	st	Z, r6
static void ProcessCommand(void) {
  uint8_t         response;

  response = InitializeSD();
  if(response != SD_OK) {
	LED_YELLOW_ON;
 310:	f7 01       	movw	r30, r14
 312:	80 81       	ld	r24, Z
 314:	84 60       	ori	r24, 0x04	; 4
 316:	80 83       	st	Z, r24
 318:	56 cf       	rjmp	.-340    	; 0x1c6 <main+0xac>
	LED_GREEN_OFF;
	LED_RED_OFF;
	return SD_NO_DETECT;
  }

  SendCommand(SD_SET_BLK, 512); // Set block length to 512 bytes.
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	52 e0       	ldi	r21, 0x02	; 2
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	80 e5       	ldi	r24, 0x50	; 80
 324:	ad de       	rcall	.-678    	; 0x80 <SendCommand>

  // Always attempt ACMD41 first for SDC then drop to CMD1
  response = SendCommand(SD_INTER, 0x1aa);
 326:	4a ea       	ldi	r20, 0xAA	; 170
 328:	51 e0       	ldi	r21, 0x01	; 1
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	88 e4       	ldi	r24, 0x48	; 72
 330:	a7 de       	rcall	.-690    	; 0x80 <SendCommand>
  if(response == 0x01) {
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	09 f0       	breq	.+2      	; 0x338 <main+0x21e>
 336:	a6 cf       	rjmp	.-180    	; 0x284 <main+0x16a>
    for(i = 0; i < 4; i++) SendByte(0xff);          // Clock through 4 bytes to burn 32 bit lower response.
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	98 de       	rcall	.-720    	; 0x6c <SendByte>
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	96 de       	rcall	.-724    	; 0x6c <SendByte>
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	94 de       	rcall	.-728    	; 0x6c <SendByte>
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	92 de       	rcall	.-732    	; 0x6c <SendByte>
 348:	c0 e2       	ldi	r28, 0x20	; 32
 34a:	de e4       	ldi	r29, 0x4E	; 78
 34c:	8e cf       	rjmp	.-228    	; 0x26a <main+0x150>
 34e:	c0 e2       	ldi	r28, 0x20	; 32
 350:	de e4       	ldi	r29, 0x4E	; 78
 352:	a9 cf       	rjmp	.-174    	; 0x2a6 <main+0x18c>

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
